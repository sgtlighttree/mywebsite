---
import BaseLayout from '../layouts/BaseLayout.astro';
import Social from '../components/Social.astro';
const pageTitle = "Get In Touch";
---
<BaseLayout pageTitle={pageTitle} showFooterCta={false}>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <style>
    /* Desktop styles */
    @media screen and (min-width: 769px) {
      .tile-container {
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      }
    }
  </style>
  <p>Have a project in mind? I'd love to hear about it. Fill out the form below and I'll get back to you as soon as possible.</p>
  <div class="contact-form">
    <!-- <h2 id="contact-form-heading">Get In Touch</h2> -->
    <form
      name="contact"
      method="POST"
      data-netlify="true"
      netlify-honeypot="bot-field"
      action="/success/"
      aria-labelledby="contact-form-heading"
      novalidate
    >
      <input type="hidden" name="form-name" value="contact" />
      <input type="hidden" name="subject" id="subject-field" />

      <!-- Honeypot field for spam prevention -->
      <p class="hidden" style="display:none;" aria-hidden="true">
        <label>Donâ€™t fill this out if youâ€™re human: <input name="bot-field" /></label>
      </p>

      <!-- Error message container -->
      <div id="form-errors" class="error-message" role="alert" aria-live="polite" style="display: none;"></div>

      <fieldset class="name-group">
        <legend class="visually-hidden">Personal Information</legend>
        <div class="form-group">
          <label for="firstname">
            First Name
            <span class="required" aria-label="required">*</span>
          </label>
          <input
            type="text"
            name="firstname"
            id="firstname"
            required
            aria-describedby="firstname-error"
            aria-invalid="false"
          >
          <div id="firstname-error" class="error-message" role="alert" aria-live="polite"></div>
        </div>
        <div class="form-group">
          <label for="lastname">
            Last Name
            <span class="required" aria-label="required">*</span>
          </label>
          <input
            type="text"
            name="lastname"
            id="lastname"
            required
            aria-describedby="lastname-error"
            aria-invalid="false"
          >
          <div id="lastname-error" class="error-message" role="alert" aria-live="polite"></div>
        </div>
      </fieldset>

      <div class="form-group">
        <label for="email">
          Email Address
          <span class="required" aria-label="required">*</span>
        </label>
        <input
          type="email"
          name="email"
          id="email"
          required
          aria-describedby="email-error email-help"
          aria-invalid="false"
        >
        <div id="email-help" class="help-text">We'll use this to respond to your inquiry</div>
        <div id="email-error" class="error-message" role="alert" aria-live="polite"></div>
      </div>

      <div class="form-group">
        <label for="organization">Organization/Company/Agency</label>
        <input
          type="text"
          name="organization"
          id="organization"
          aria-describedby="organization-help"
        >
        <div id="organization-help" class="help-text">Optional - let us know if you're contacting from a company or organization</div>
      </div>

      <div class="form-group">
        <label for="phone-input">Phone Number</label>
        <div class="phone-selector-container">
          <button type="button" class="country-selector" aria-expanded="false" aria-haspopup="listbox" aria-controls="country-dropdown">
            <span class="flag">ðŸ‡µðŸ‡­</span>
            <span class="country-code">PH</span>
            <span class="dropdown-arrow">â–¼</span>
          </button>
          <div class="dial-code-display">+63</div>
          <input
            type="tel"
            class="phone-input"
            id="phone-input"
            placeholder="912 345 6789"
            aria-describedby="phone-help"
            inputmode="numeric"
            pattern="[0-9]*"
          >
          <input type="hidden" name="phone" class="phone-hidden-input">
          <div class="country-dropdown" id="country-dropdown" role="listbox" aria-label="Country selection">
            <input type="text" class="country-search" placeholder="Search country or code" aria-label="Search countries">
            <div class="country-list" role="listbox">
              <!-- Countries will be populated by JavaScript -->
            </div>
          </div>
        </div>
        <div id="phone-help" class="help-text">Optional - select your country and enter your phone number</div>
      </div>

      <div class="form-group">
        <label for="topic">
          Subject
          <span class="required" aria-label="required">*</span>
        </label>
        <input
          type="text"
          name="topic"
          id="topic"
          required
          aria-describedby="topic-error topic-help"
          aria-invalid="false"
        >
        <div id="topic-help" class="help-text">Brief description of your inquiry</div>
        <div id="topic-error" class="error-message" role="alert" aria-live="polite"></div>
      </div>

      <div class="form-group">
        <label for="message">
          Message
          <span class="required" aria-label="required">*</span>
        </label>
        <textarea
          name="message"
          id="message"
          rows="5"
          required
          aria-describedby="message-error message-help"
          aria-invalid="false"
        ></textarea>
        <div id="message-help" class="help-text">Please provide details about your inquiry</div>
        <div id="message-error" class="error-message" role="alert" aria-live="polite"></div>
      </div>

      <div class="privacy-notice" role="note" aria-label="Privacy information">
        <p>By submitting this form, you agree to our <a href="/privacy-policy" target="_blank" rel="noopener noreferrer">Privacy Policy</a>.</p>
      </div>

      <button type="submit" id="submit-button">
        <span>Send Message</span>
      </button>
    </form>
    <br><hr style="border-top: 1px dashed var(--border-light)"><br>
    <div class="tile-container">
      {[
        { platform: "Facebook", username: "lighttree.gfx" },
        { platform: "LinkedIn", username: "in/matthewoyan/" },
        { platform: "Instagram", username: "sgtlighttree" },
      ].map((item) => (
        <div class="tile-item">
          <Social platform={item.platform} username={item.username} />
        </div>
      ))}
    </div>
  </div>
  <style>
      /* Contact Form Styling */
  .contact-form {
    max-width: 100%;
    margin: 2rem 0;
  }

  .contact-form button {
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .name-group {
    display: flex;
    gap: 0.75rem; /* Adjust the gap as needed */
  }

  .name-group .form-group {
    flex: 1; /* This will make both inputs share the row equally */
  }

  /* Accessibility Styles */
  .visually-hidden {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    padding: 0 !important;
    margin: -1px !important;
    overflow: hidden !important;
    clip: rect(0, 0, 0, 0) !important;
    white-space: nowrap !important;
    border: 0 !important;
  }

  .required {
    color: #e74c3c;
    font-weight: bold;
  }

  .error-message {
    color: #e74c3c;
    font-size: 0.875rem;
    margin-top: 0.25rem;
    min-height: 1.25rem;
    display: block;
  }

  .help-text {
    color: #666;
    font-size: 0.875rem;
    margin-top: 0.25rem;
    font-style: italic;
  }

  /* Focus styles for better accessibility */
  input:focus,
  textarea:focus,
  button:focus {
    outline: 2px solid #3498db;
    outline-offset: 2px;
    border-color: #3498db;
  }

  /* Error state styles */
  input[aria-invalid="true"],
  textarea[aria-invalid="true"] {
    border-color: #e74c3c;
    background-color: rgba(231, 76, 60, 0.1);
  }

  input[aria-invalid="true"]:focus,
  textarea[aria-invalid="true"]:focus {
    border-color: #e74c3c;
    background-color: rgba(231, 76, 60, 0.15);
  }

  /* Dark mode error state adjustments */
  html.dark input[aria-invalid="true"],
  html.dark textarea[aria-invalid="true"] {
    background-color: rgba(231, 76, 60, 0.15);
    border-color: #ff6b6b;
  }

  html.dark input[aria-invalid="true"]:focus,
  html.dark textarea[aria-invalid="true"]:focus {
    background-color: rgba(231, 76, 60, 0.2);
    border-color: #ff6b6b;
  }

  /* Button accessibility */
  button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  button:hover {
    background-color: #2980b9;
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .error-message {
      color: #000;
      font-weight: bold;
    }

    .help-text {
      color: #333;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }

  /* Form fieldset styling */
  fieldset {
    border: none;
    margin: 0;
    padding: 0;
  }

  legend {
    font-weight: bold;
    margin-bottom: 0.5rem;
  }

  /* Privacy notice styling */
  .privacy-notice {
    background-color: var(--bg-secondary);
    border: 1px solid var(--border-light);
    padding: 1rem;
    margin: 1.5rem 0;
    font-size: 0.9rem;
  }

  .privacy-notice p {
    margin: 0;
    color: var(--text-primary);
  }

  .privacy-notice a {
    color: var(--text-primary);
    text-decoration: underline;
    font-weight: 500;
  }

  .privacy-notice a:hover,
  .privacy-notice a:focus {
    color: var(--hover-text);
    background-color: var(--hover-bg);
    padding: 2px 4px;
    text-decoration: none;
  }

  /* High contrast mode for privacy notice */
  @media (prefers-contrast: high) {
    .privacy-notice {
      border-width: 2px;
      font-weight: bold;
    }
  }

  /*â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
     Phone Selector Styles
  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€*/
  .phone-selector-container {
    position: relative;
    display: flex;
    align-items: stretch;
    width: 100%;
  }

  .country-selector {
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem;
    background-color: var(--form-bg);
    border: 1px solid var(--form-border);
    border-right: none;
    color: var(--form-text);
    font-family: inherit;
    font-size: 1rem;
    cursor: pointer;
    width: 100px;
    height: 3rem;
    transition: border-color 0.3s, box-shadow 0.3s;
    flex-shrink: 0;
  }

  .country-selector:hover {
    background-color: var(--hover-bg);
    color: var(--hover-text);
  }

  .country-selector:focus {
    border-color: var(--form-border-focus);
    box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
    outline: none;
    z-index: 1;
  }

  .country-selector[aria-expanded="true"] {
    border-color: var(--form-border-focus);
    box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
  }

  .flag {
    font-size: 1.2em;
    line-height: 1;
  }

  .country-code {
    font-weight: 500;
    letter-spacing: 0.5px;
  }

  .dropdown-arrow {
    font-size: 0.8em;
    transition: transform 0.3s ease;
  }

  .country-selector[aria-expanded="true"] .dropdown-arrow {
    transform: rotate(180deg);
  }

  .dial-code-display {
    display: flex;
    align-items: center;
    padding: 0.75rem;
    background-color: var(--form-bg);
    border: 1px solid var(--form-border);
    border-right: none;
    border-left: none;
    color: var(--form-text);
    font-family: 'Geist Mono Variable', monospace;
    font-size: 1rem;
    font-weight: 500;
    white-space: nowrap;
    min-width: 50px;
    width: 50px;
    height: 3rem;
    justify-content: center;
  }

  .phone-input {
    flex: 1;
    padding: 0.75rem;
    border: 1px solid var(--form-border);
    border-left: none;
    background-color: var(--form-bg);
    color: var(--form-text);
    font-family: inherit;
    font-size: 1rem;
    transition: border-color 0.3s, box-shadow 0.3s;
    height: 3rem;
  }

  .phone-input:focus {
    border-color: var(--form-border-focus);
    box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
    outline: none;
  }

  .phone-input::placeholder {
    color: var(--text-muted);
  }

  .country-dropdown {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background-color: var(--form-bg);
    border: 1px solid var(--form-border);
    border-top: none;
    border-radius: 0 0 0.25rem 0.25rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    max-height: 300px;
    overflow: hidden;
    z-index: 1000;
    display: none;
  }

  .country-dropdown[aria-expanded="true"] {
    display: block;
  }

  .country-search {
    width: 100%;
    padding: 0.75rem;
    border: none;
    background-color: var(--bg-secondary);
    color: var(--form-text);
    font-family: inherit;
    font-size: 1rem;
    border-bottom: 1px solid var(--form-border);
    box-sizing: border-box;
  }

  .country-search:focus {
    outline: none;
    background-color: var(--hover-bg);
    color: var(--hover-text);
  }

  .country-search::placeholder {
    color: var(--text-muted);
  }

  .country-list {
    max-height: 240px;
    overflow-y: auto;
    margin: 0;
    padding: 0;
  }

  .country-option {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
    border-bottom: 1px solid var(--form-border);
  }

  .country-option:hover,
  .country-option:focus {
    background-color: var(--hover-bg);
    color: var(--hover-text);
    outline: none;
  }

  .country-option:last-child {
    border-bottom: none;
  }

  .country-option .flag {
    font-size: 1.2em;
    width: 24px;
    text-align: center;
  }

  .country-option .country-name {
    flex: 1;
    font-weight: 400;
  }

  .country-option .dial-code {
    font-weight: 500;
    color: var(--text-secondary);
    font-family: 'Geist Mono Variable', monospace;
  }

  /* Dark mode adjustments for phone selector */
  html.dark .country-dropdown {
    border-color: var(--border-light);
    background-color: var(--bg-secondary);
  }

  html.dark .country-search {
    background-color: var(--bg-primary);
    border-color: var(--border-light);
  }

  html.dark .country-option {
    border-color: var(--border-light);
  }

  /* Mobile responsiveness */
  @media (max-width: 600px) {
    .country-selector {
      width: 120px;
    }
  }

  /* High contrast mode for phone selector */
  @media (prefers-contrast: high) {
    .country-selector,
    .phone-input,
    .country-dropdown {
      border-width: 2px;
    }

    .country-option {
      border-bottom-width: 2px;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .dropdown-arrow,
    .country-option {
      transition: none;
    }
  }
  </style>

  <script>
    // Accessible Form Validation
    class AccessibleContactForm {
      private form: HTMLFormElement;
      private submitButton: HTMLButtonElement | null;
      private formErrors: HTMLElement | null;
      private validationRules: Record<string, {
        required?: boolean;
        minLength?: number;
        pattern?: RegExp;
        message: string;
      }>;

      constructor(form: HTMLFormElement) {
        this.form = form;
        this.submitButton = form.querySelector('#submit-button') as HTMLButtonElement | null;
        this.formErrors = form.querySelector('#form-errors');

        this.validationRules = {
          firstname: {
            required: true,
            minLength: 2,
            pattern: /^[a-zA-Z\s'-]+$/,
            message: 'First name must be at least 2 characters and contain only letters'
          },
          lastname: {
            required: true,
            minLength: 2,
            pattern: /^[a-zA-Z\s'-]+$/,
            message: 'Last name must be at least 2 characters and contain only letters'
          },
          email: {
            required: true,
            pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
            message: 'Please enter a valid email address'
          },
          topic: {
            required: true,
            minLength: 5,
            message: 'Subject must be at least 5 characters long'
          },
          message: {
            required: true,
            minLength: 10,
            message: 'Message must be at least 10 characters long'
          }
        };

        this.init();
      }

      init() {
        // Add event listeners
        this.form.addEventListener('submit', (e: Event) => this.handleSubmit(e));

        // Add real-time validation on blur
        Object.keys(this.validationRules).forEach((fieldName: string) => {
          const field = this.form.querySelector(`#${fieldName}`) as HTMLInputElement | HTMLTextAreaElement | null;
          if (field) {
            field.addEventListener('blur', () => this.validateField(fieldName));
            field.addEventListener('input', () => this.clearFieldError(fieldName));
          }
        });

        // Handle form reset
        this.form.addEventListener('reset', () => this.clearAllErrors());
      }

      handleSubmit(event: Event) {
        event.preventDefault();

        // Clear previous errors
        this.clearAllErrors();

        // Validate all fields
        const isValid = this.validateForm();

        if (isValid) {
          // Generate subject line
          this.generateSubject();

          // Show loading state
          this.setLoadingState(true);

          // Submit the form
          this.form.submit();
        } else {
          // Focus first error field
          this.focusFirstError();

          // Announce errors to screen readers
          this.announceErrors();
        }
      }

      validateForm(): boolean {
        let isValid = true;
        const errors: string[] = [];

        Object.keys(this.validationRules).forEach((fieldName: string) => {
          const field = this.form.querySelector(`#${fieldName}`) as HTMLInputElement | HTMLTextAreaElement | null;
          if (field) {
            const fieldValid = this.validateField(fieldName);
            if (!fieldValid) {
              isValid = false;
              const errorElement = this.form.querySelector(`#${fieldName}-error`);
              if (errorElement) {
                errors.push(`${fieldName}: ${errorElement.textContent}`);
              }
            }
          }
        });

        // Show summary of errors
        if (errors.length > 0) {
          this.showFormErrors(errors);
        }

        return isValid;
      }

      validateField(fieldName: string): boolean {
        const field = this.form.querySelector(`#${fieldName}`) as HTMLInputElement | HTMLTextAreaElement | null;
        const rules = this.validationRules[fieldName];
        const errorElement = this.form.querySelector(`#${fieldName}-error`);

        if (!field || !rules || !errorElement) return true;

        const value = field.value.trim();
        let isValid = true;
        let errorMessage = '';

        // Check required fields
        if (rules.required && !value) {
          isValid = false;
          errorMessage = `${this.getFieldLabel(fieldName)} is required`;
        }
        // Check minimum length
        else if (value && rules.minLength && value.length < rules.minLength) {
          isValid = false;
          errorMessage = rules.message;
        }
        // Check pattern
        else if (value && rules.pattern && !rules.pattern.test(value)) {
          isValid = false;
          errorMessage = rules.message;
        }

        this.setFieldError(fieldName, errorMessage, !isValid);
        return isValid;
      }

      setFieldError(fieldName: string, message: string, hasError: boolean): void {
        const field = this.form.querySelector(`#${fieldName}`) as HTMLInputElement | HTMLTextAreaElement | null;
        const errorElement = this.form.querySelector(`#${fieldName}-error`);

        if (!field || !errorElement) return;

        field.setAttribute('aria-invalid', hasError.toString());
        errorElement.textContent = message;

        if (hasError) {
          field.classList.add('error');
        } else {
          field.classList.remove('error');
        }
      }

      clearFieldError(fieldName: string): void {
        this.setFieldError(fieldName, '', false);
      }

      clearAllErrors(): void {
        Object.keys(this.validationRules).forEach((fieldName: string) => {
          this.clearFieldError(fieldName);
        });
        this.hideFormErrors();
      }

      showFormErrors(errors: string[]): void {
        if (!this.formErrors) return;

        const errorList = errors.map((error: string) => `<li>${error}</li>`).join('');
        this.formErrors.innerHTML = `
          <p>Please correct the following errors:</p>
          <ul>${errorList}</ul>
        `;
        this.formErrors.style.display = 'block';
        this.formErrors.setAttribute('aria-live', 'assertive');
      }

      hideFormErrors(): void {
        if (this.formErrors) {
          this.formErrors.style.display = 'none';
          this.formErrors.setAttribute('aria-live', 'polite');
        }
      }

      getFieldLabel(fieldName: string): string {
        const label = this.form.querySelector(`label[for="${fieldName}"]`);
        return label ? label.textContent.replace('*', '').trim() : fieldName;
      }

      generateSubject(): void {
        const topicEl = this.form.querySelector('#topic') as HTMLInputElement | null;
        const firstnameEl = this.form.querySelector('#firstname') as HTMLInputElement | null;
        const lastnameEl = this.form.querySelector('#lastname') as HTMLInputElement | null;
        const organizationEl = this.form.querySelector('#organization') as HTMLInputElement | null;
        const subjectField = this.form.querySelector('#subject-field') as HTMLInputElement | null;

        if (topicEl && firstnameEl && lastnameEl && subjectField) {
          const topic = topicEl.value.trim();
          const firstname = firstnameEl.value.trim();
          const lastname = lastnameEl.value.trim();
          const organization = organizationEl ? organizationEl.value.trim() : '';

          let subject = `[${topic}] - Message from ${firstname} ${lastname}`;

          if (organization) {
            subject += `, ${organization}`;
          }

          subjectField.value = subject;
        }
      }

      setLoadingState(loading: boolean): void {
        if (!this.submitButton) return;

        this.submitButton.disabled = loading;
        const buttonText = this.submitButton.querySelector('span');

        if (loading) {
          this.submitButton.setAttribute('aria-busy', 'true');
          if (buttonText) buttonText.textContent = 'Sending...';
        } else {
          this.submitButton.setAttribute('aria-busy', 'false');
          if (buttonText) buttonText.textContent = 'Send Message';
        }
      }

      focusFirstError(): void {
        const firstErrorField = this.form.querySelector('[aria-invalid="true"]') as HTMLElement | null;
        if (firstErrorField) {
          firstErrorField.focus();
        }
      }

      announceErrors(): void {
        const errorCount = this.form.querySelectorAll('[aria-invalid="true"]').length;
        if (errorCount > 0) {
          // Create a temporary element for screen reader announcement
          const announcement = document.createElement('div');
          announcement.setAttribute('aria-live', 'assertive');
          announcement.setAttribute('aria-atomic', 'true');
          announcement.className = 'visually-hidden';
          announcement.textContent = `Form has ${errorCount} error${errorCount > 1 ? 's' : ''} that need${errorCount > 1 ? '' : 's'} to be corrected`;

          document.body.appendChild(announcement);

          // Remove after announcement
          setTimeout(() => {
            document.body.removeChild(announcement);
          }, 1000);
        }
      }
    }

    // Phone Selector Functionality
    class PhoneSelector {
      private container: HTMLElement;
      private selector: HTMLButtonElement;
      private dropdown: HTMLElement;
      private searchInput: HTMLInputElement;
      private countryList: HTMLElement;
      private phoneInput: HTMLInputElement;
      private hiddenInput: HTMLInputElement;
      private dialCodeDisplay: HTMLElement;
      private countries: Country[];
      private currentCountry: Country;
      private isOpen: boolean = false;

      constructor(container: HTMLElement) {
        this.container = container;
        this.selector = container.querySelector('.country-selector') as HTMLButtonElement;
        this.dropdown = container.querySelector('.country-dropdown') as HTMLElement;
        this.searchInput = container.querySelector('.country-search') as HTMLInputElement;
        this.countryList = container.querySelector('.country-list') as HTMLElement;
        this.phoneInput = container.querySelector('.phone-input') as HTMLInputElement;
        this.hiddenInput = container.querySelector('.phone-hidden-input') as HTMLInputElement;
        this.dialCodeDisplay = container.querySelector('.dial-code-display') as HTMLElement;

        this.countries = this.getCountries();
        this.currentCountry = this.countries[0]; // Default to Philippines

        this.init();
      }

      private getCountries(): Country[] {
        const countries: Country[] = [
          { name: "Philippines", code: "PH", dialCode: "+63", flag: "ðŸ‡µðŸ‡­" },
          { name: "United States", code: "US", dialCode: "+1", flag: "ðŸ‡ºðŸ‡¸" },
          { name: "United Kingdom", code: "GB", dialCode: "+44", flag: "ðŸ‡¬ðŸ‡§" },
          { name: "Singapore", code: "SG", dialCode: "+65", flag: "ðŸ‡¸ðŸ‡¬" },
          { name: "Australia", code: "AU", dialCode: "+61", flag: "ðŸ‡¦ðŸ‡º" },
          { name: "Afghanistan", code: "AF", dialCode: "+93", flag: "ðŸ‡¦ðŸ‡«" },
          { name: "Albania", code: "AL", dialCode: "+355", flag: "ðŸ‡¦ðŸ‡±" },
          { name: "Algeria", code: "DZ", dialCode: "+213", flag: "ðŸ‡©ðŸ‡¿" },
          { name: "Argentina", code: "AR", dialCode: "+54", flag: "ðŸ‡¦ðŸ‡·" },
          { name: "Austria", code: "AT", dialCode: "+43", flag: "ðŸ‡¦ðŸ‡¹" },
          { name: "Bangladesh", code: "BD", dialCode: "+880", flag: "ðŸ‡§ðŸ‡©" },
          { name: "Belgium", code: "BE", dialCode: "+32", flag: "ðŸ‡§ðŸ‡ª" },
          { name: "Brazil", code: "BR", dialCode: "+55", flag: "ðŸ‡§ðŸ‡·" },
          { name: "Canada", code: "CA", dialCode: "+1", flag: "ðŸ‡¨ðŸ‡¦" },
          { name: "China", code: "CN", dialCode: "+86", flag: "ðŸ‡¨ðŸ‡³" },
          { name: "Denmark", code: "DK", dialCode: "+45", flag: "ðŸ‡©ðŸ‡°" },
          { name: "Egypt", code: "EG", dialCode: "+20", flag: "ðŸ‡ªðŸ‡¬" },
          { name: "Finland", code: "FI", dialCode: "+358", flag: "ðŸ‡«ðŸ‡®" },
          { name: "France", code: "FR", dialCode: "+33", flag: "ðŸ‡«ðŸ‡·" },
          { name: "Germany", code: "DE", dialCode: "+49", flag: "ðŸ‡©ðŸ‡ª" },
          { name: "Greece", code: "GR", dialCode: "+30", flag: "ðŸ‡¬ðŸ‡·" },
          { name: "Hong Kong", code: "HK", dialCode: "+852", flag: "ðŸ‡­ðŸ‡°" },
          { name: "India", code: "IN", dialCode: "+91", flag: "ðŸ‡®ðŸ‡³" },
          { name: "Indonesia", code: "ID", dialCode: "+62", flag: "ðŸ‡®ðŸ‡©" },
          { name: "Iran", code: "IR", dialCode: "+98", flag: "ðŸ‡®ðŸ‡·" },
          { name: "Iraq", code: "IQ", dialCode: "+964", flag: "ðŸ‡®ðŸ‡¶" },
          { name: "Ireland", code: "IE", dialCode: "+353", flag: "ðŸ‡®ðŸ‡ª" },
          { name: "Israel", code: "IL", dialCode: "+972", flag: "ðŸ‡®ðŸ‡±" },
          { name: "Italy", code: "IT", dialCode: "+39", flag: "ðŸ‡®ðŸ‡¹" },
          { name: "Japan", code: "JP", dialCode: "+81", flag: "ðŸ‡¯ðŸ‡µ" },
          { name: "Jordan", code: "JO", dialCode: "+962", flag: "ðŸ‡¯ðŸ‡´" },
          { name: "Kenya", code: "KE", dialCode: "+254", flag: "ðŸ‡°ðŸ‡ª" },
          { name: "Kuwait", code: "KW", dialCode: "+965", flag: "ðŸ‡°ðŸ‡¼" },
          { name: "Lebanon", code: "LB", dialCode: "+961", flag: "ðŸ‡±ðŸ‡§" },
          { name: "Malaysia", code: "MY", dialCode: "+60", flag: "ðŸ‡²ðŸ‡¾" },
          { name: "Mexico", code: "MX", dialCode: "+52", flag: "ðŸ‡²ðŸ‡½" },
          { name: "Netherlands", code: "NL", dialCode: "+31", flag: "ðŸ‡³ðŸ‡±" },
          { name: "New Zealand", code: "NZ", dialCode: "+64", flag: "ðŸ‡³ðŸ‡¿" },
          { name: "Nigeria", code: "NG", dialCode: "+234", flag: "ðŸ‡³ðŸ‡¬" },
          { name: "Norway", code: "NO", dialCode: "+47", flag: "ðŸ‡³ðŸ‡´" },
          { name: "Pakistan", code: "PK", dialCode: "+92", flag: "ðŸ‡µðŸ‡°" },
          { name: "Poland", code: "PL", dialCode: "+48", flag: "ðŸ‡µðŸ‡±" },
          { name: "Portugal", code: "PT", dialCode: "+351", flag: "ðŸ‡µðŸ‡¹" },
          { name: "Qatar", code: "QA", dialCode: "+974", flag: "ðŸ‡¶ðŸ‡¦" },
          { name: "Russia", code: "RU", dialCode: "+7", flag: "ðŸ‡·ðŸ‡º" },
          { name: "Saudi Arabia", code: "SA", dialCode: "+966", flag: "ðŸ‡¸ðŸ‡¦" },
          { name: "South Africa", code: "ZA", dialCode: "+27", flag: "ðŸ‡¿ðŸ‡¦" },
          { name: "South Korea", code: "KR", dialCode: "+82", flag: "ðŸ‡°ðŸ‡·" },
          { name: "Spain", code: "ES", dialCode: "+34", flag: "ðŸ‡ªðŸ‡¸" },
          { name: "Sweden", code: "SE", dialCode: "+46", flag: "ðŸ‡¸ðŸ‡ª" },
          { name: "Switzerland", code: "CH", dialCode: "+41", flag: "ðŸ‡¨ðŸ‡­" },
          { name: "Taiwan", code: "TW", dialCode: "+886", flag: "ðŸ‡¹ðŸ‡¼" },
          { name: "Thailand", code: "TH", dialCode: "+66", flag: "ðŸ‡¹ðŸ‡­" },
          { name: "Turkey", code: "TR", dialCode: "+90", flag: "ðŸ‡¹ðŸ‡·" },
          { name: "Ukraine", code: "UA", dialCode: "+380", flag: "ðŸ‡ºðŸ‡¦" },
          { name: "United Arab Emirates", code: "AE", dialCode: "+971", flag: "ðŸ‡¦ðŸ‡ª" },
          { name: "Vietnam", code: "VN", dialCode: "+84", flag: "ðŸ‡»ðŸ‡³" }
        ];

        return countries;
      }

      private init(): void {
        this.updateSelectorDisplay();
        this.populateCountries();
        this.bindEvents();
      }

      private populateCountries(): void {
        this.countryList.innerHTML = '';

        this.countries.forEach((country, index) => {
          const option = document.createElement('div');
          option.className = 'country-option';
          option.setAttribute('role', 'option');
          option.setAttribute('aria-selected', 'false');
          option.setAttribute('data-index', index.toString());

          option.innerHTML = `
            <span class="flag">${country.flag}</span>
            <span class="country-name">${country.name}</span>
            <span class="dial-code">${country.dialCode}</span>
          `;

          option.addEventListener('click', () => this.selectCountry(country, option));
          option.addEventListener('keydown', (e) => this.handleOptionKeydown(e, country, option));

          this.countryList.appendChild(option);
        });
      }

      private bindEvents(): void {
        // Toggle dropdown
        this.selector.addEventListener('click', () => this.toggleDropdown());

        // Search functionality
        this.searchInput.addEventListener('input', (e) => this.handleSearch(e));
        this.searchInput.addEventListener('keydown', (e) => this.handleSearchKeydown(e));

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => this.handleOutsideClick(e));

        // Keyboard navigation
        this.selector.addEventListener('keydown', (e) => this.handleSelectorKeydown(e));

        // Phone input validation (numeric only)
        this.phoneInput.addEventListener('input', (e) => this.handlePhoneInput(e));
        this.phoneInput.addEventListener('keydown', (e) => this.handlePhoneKeydown(e));
      }

      private toggleDropdown(): void {
        if (this.isOpen) {
          this.closeDropdown();
        } else {
          this.openDropdown();
        }
      }

      private openDropdown(): void {
        this.isOpen = true;
        this.selector.setAttribute('aria-expanded', 'true');
        this.dropdown.setAttribute('aria-expanded', 'true');
        this.searchInput.focus();

        // Announce to screen readers
        this.announceDropdown('Country selector opened');
      }

      private closeDropdown(): void {
        this.isOpen = false;
        this.selector.setAttribute('aria-expanded', 'false');
        this.dropdown.setAttribute('aria-expanded', 'false');
        this.searchInput.value = '';

        // Clear search filter
        const options = this.countryList.querySelectorAll('.country-option');
        options.forEach(option => {
          (option as HTMLElement).style.display = 'flex';
        });

        // Only focus selector if keyboard was used to close it
        // Don't focus if closed by clicking outside to avoid stealing focus from other form fields
        this.announceDropdown('Country selector closed');
      }

      private handleSearch(e: Event): void {
        const query = (e.target as HTMLInputElement).value.toLowerCase().trim();
        const options = this.countryList.querySelectorAll('.country-option');

        options.forEach(option => {
          const countryName = option.querySelector('.country-name')?.textContent?.toLowerCase() || '';
          const dialCode = option.querySelector('.dial-code')?.textContent?.toLowerCase() || '';

          if (countryName.includes(query) || dialCode.includes(query)) {
            (option as HTMLElement).style.display = 'flex';
          } else {
            (option as HTMLElement).style.display = 'none';
          }
        });
      }

      private handleSearchKeydown(e: KeyboardEvent): void {
        if (e.key === 'Escape') {
          this.closeDropdown();
        } else if (e.key === 'ArrowDown') {
          e.preventDefault();
          const firstVisibleOption = this.countryList.querySelector('.country-option[style*="flex"]') as HTMLElement;
          if (firstVisibleOption) {
            firstVisibleOption.focus();
          }
        }
      }

      private handleSelectorKeydown(e: KeyboardEvent): void {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.toggleDropdown();
        } else if (e.key === 'ArrowDown' && !this.isOpen) {
          e.preventDefault();
          this.openDropdown();
        }
      }

      private handleOptionKeydown(e: KeyboardEvent, country: Country, option: HTMLElement): void {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.selectCountry(country, option);
        } else if (e.key === 'ArrowDown') {
          e.preventDefault();
          this.focusNextOption(option);
        } else if (e.key === 'ArrowUp') {
          e.preventDefault();
          this.focusPreviousOption(option);
        } else if (e.key === 'Escape') {
          this.closeDropdown();
        }
      }

      private focusNextOption(currentOption: HTMLElement): void {
        const visibleOptions = Array.from(this.countryList.querySelectorAll('.country-option[style*="flex"]')) as HTMLElement[];
        const currentIndex = visibleOptions.indexOf(currentOption);
        const nextIndex = (currentIndex + 1) % visibleOptions.length;
        visibleOptions[nextIndex].focus();
      }

      private focusPreviousOption(currentOption: HTMLElement): void {
        const visibleOptions = Array.from(this.countryList.querySelectorAll('.country-option[style*="flex"]')) as HTMLElement[];
        const currentIndex = visibleOptions.indexOf(currentOption);
        const prevIndex = currentIndex === 0 ? visibleOptions.length - 1 : currentIndex - 1;
        visibleOptions[prevIndex].focus();
      }

      private handleOutsideClick(e: Event): void {
        if (!this.container.contains(e.target as Node)) {
          this.closeDropdown();
        }
      }

      private handlePhoneInput(e: Event): void {
        const input = e.target as HTMLInputElement;
        // Remove any non-numeric characters
        input.value = input.value.replace(/[^\d]/g, '');
        this.updateHiddenInput();
      }

      private handlePhoneKeydown(e: KeyboardEvent): void {
        // Allow backspace, delete, tab, escape, enter, arrows
        if (['Backspace', 'Delete', 'Tab', 'Escape', 'Enter', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {
          return;
        }

        // Prevent input if it's not a number
        if (!/[0-9]/.test(e.key)) {
          e.preventDefault();
        }
      }

      private selectCountry(country: Country, option: HTMLElement): void {
        this.currentCountry = country;
        this.updateSelectorDisplay();
        this.updateHiddenInput();
        this.closeDropdown();

        // Clear previous selection
        const allOptions = this.countryList.querySelectorAll('.country-option');
        allOptions.forEach(opt => opt.setAttribute('aria-selected', 'false'));

        // Set new selection
        option.setAttribute('aria-selected', 'true');

        // Announce selection to screen readers
        this.announceSelection(country);
      }

      private updateSelectorDisplay(): void {
        const flagEl = this.selector.querySelector('.flag');
        const codeEl = this.selector.querySelector('.country-code');

        if (flagEl) flagEl.textContent = this.currentCountry.flag;
        if (codeEl) codeEl.textContent = this.currentCountry.code;
        if (this.dialCodeDisplay) this.dialCodeDisplay.textContent = this.currentCountry.dialCode;
      }

      private updateHiddenInput(): void {
        const phoneNumber = this.phoneInput.value.trim();
        if (phoneNumber) {
          this.hiddenInput.value = `${this.currentCountry.dialCode} ${phoneNumber}`;
        } else {
          this.hiddenInput.value = '';
        }
      }

      private announceDropdown(state: string): void {
        const announcement = document.createElement('div');
        announcement.setAttribute('aria-live', 'polite');
        announcement.setAttribute('aria-atomic', 'true');
        announcement.className = 'visually-hidden';
        announcement.textContent = state;

        document.body.appendChild(announcement);

        setTimeout(() => {
          document.body.removeChild(announcement);
        }, 1000);
      }

      private announceSelection(country: Country): void {
        const announcement = document.createElement('div');
        announcement.setAttribute('aria-live', 'polite');
        announcement.setAttribute('aria-atomic', 'true');
        announcement.className = 'visually-hidden';
        announcement.textContent = `Selected country: ${country.name}, dial code: ${country.dialCode}`;

        document.body.appendChild(announcement);

        setTimeout(() => {
          document.body.removeChild(announcement);
        }, 1000);
      }
    }

    // Country interface
    interface Country {
      name: string;
      code: string;
      dialCode: string;
      flag: string;
    }

    // Initialize the form and phone selector when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
      const contactForm = document.querySelector('form[name="contact"]') as HTMLFormElement | null;
      if (contactForm) {
        new AccessibleContactForm(contactForm);
      }

      // Initialize phone selector
      const phoneContainer = document.querySelector('.phone-selector-container') as HTMLElement | null;
      if (phoneContainer) {
        new PhoneSelector(phoneContainer);
      }
    });
  </script>
</BaseLayout>
