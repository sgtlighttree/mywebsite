---
import BaseLayout from '../layouts/BaseLayout.astro';
import Social from '../components/Social.astro';
const pageTitle = "Get In Touch";
---
<BaseLayout pageTitle={pageTitle} showFooterCta={false}>
  <style>
    /* Contact form-specific styles */
    @media screen and (min-width: 769px) {
      .tile-container {
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      }
    }
  </style>
  <p>Have a project in mind? I'd love to hear about it. Fill out the form below and I'll get back to you as soon as possible.</p>
  <div class="contact-form">
    <!-- <h2 id="contact-form-heading">Get In Touch</h2> -->
    <form
      id="contact-form"
      name="contact"
      method="POST"
      data-netlify="true"
      netlify-honeypot="bot-field"
      action="/success/"
      aria-labelledby="contact-form-heading"
      autocomplete="on"
      novalidate
    >
      <input type="hidden" name="form-name" value="contact" />
      <input type="hidden" name="subject" id="subject-field" />

      <!-- Honeypot field for spam prevention -->
      <p class="hidden" style="display:none;" aria-hidden="true">
        <label>Donâ€™t fill this out if youâ€™re human: <input name="bot-field" /></label>
      </p>

      <!-- Error message container -->
      <div id="form-errors" class="error-message" role="alert" aria-live="polite" style="display: none;"></div>

      <fieldset class="name-group">
        <legend class="visually-hidden">Personal Information</legend>
        <div class="form-group">
          <label for="firstname">
            First Name
            <span class="required" aria-label="required">*</span>
          </label>
          <input
            type="text"
            name="firstname"
            id="firstname"
            required
            aria-describedby="firstname-error"
            aria-invalid="false"
            autocomplete="given-name"
            maxlength="100"
          >
          <div id="firstname-error" class="error-message" role="alert" aria-live="polite"></div>
        </div>
        <div class="form-group">
          <label for="lastname">
            Last Name
            <span class="required" aria-label="required">*</span>
          </label>
          <input
            type="text"
            name="lastname"
            id="lastname"
            required
            aria-describedby="lastname-error"
            aria-invalid="false"
            autocomplete="family-name"
            maxlength="100"
          >
          <div id="lastname-error" class="error-message" role="alert" aria-live="polite"></div>
        </div>
      </fieldset>

      <div class="form-group">
        <label for="email">
          Email Address
          <span class="required" aria-label="required">*</span>
        </label>
        <input
          type="email"
          name="email"
          id="email"
          required
          aria-describedby="email-error email-help"
          aria-invalid="false"
          autocomplete="email"
          inputmode="email"
          maxlength="254"
        >
        <div id="email-help" class="help-text">We'll use this to respond to your inquiry</div>
        <div id="email-error" class="error-message" role="alert" aria-live="polite"></div>
      </div>

      <div class="form-group">
        <label for="organization">Organization/Company/Agency</label>
        <input
          type="text"
          name="organization"
          id="organization"
          aria-describedby="organization-help"
          autocomplete="organization"
          maxlength="150"
        >
        <div id="organization-help" class="help-text">Optional - let us know if you're contacting from a company or organization</div>
      </div>

      <div class="form-group">
        <label for="phone-input">Phone Number</label>
        <div class="phone-selector-container">
          <button type="button" class="country-selector" aria-expanded="false" aria-haspopup="listbox" aria-controls="country-dropdown" aria-label="Select country">
            <span class="flag" aria-hidden="true">ðŸ‡µðŸ‡­</span>
            <span class="country-code" aria-live="polite">PH</span>
            <span class="dropdown-arrow" aria-hidden="true">â–¼</span>
          </button>
          <div class="dial-code-display">+63</div>
          <input
            type="tel"
            class="phone-input"
            id="phone-input"
            placeholder=""
            aria-describedby="phone-help"
            inputmode="numeric"
            pattern="[0-9]*"
            autocomplete="tel-national"
            maxlength="32"
          >
          <input type="hidden" name="phone" class="phone-hidden-input">
          <div class="country-dropdown" id="country-dropdown" role="listbox" aria-label="Country selection">
            <input type="text" class="country-search" placeholder="Search country or code" aria-label="Search countries">
            <div class="country-list" role="listbox">
              <!-- Countries will be populated by JavaScript -->
            </div>
          </div>
        </div>
        <div id="phone-help" class="help-text">Optional - select your country and enter your phone number</div>
      </div>

      <div class="form-group">
        <label for="topic">
          Subject
          <span class="required" aria-label="required">*</span>
        </label>
        <input
          type="text"
          name="topic"
          id="topic"
          required
          aria-describedby="topic-error topic-help"
          aria-invalid="false"
          autocomplete="off"
          minlength="3"
          maxlength="100"
        >
        <div id="topic-help" class="help-text">Brief description of your inquiry</div>
        <div id="topic-error" class="error-message" role="alert" aria-live="polite"></div>
      </div>

      <div class="form-group">
        <label for="message">
          Message
          <span class="required" aria-label="required">*</span>
        </label>
        <textarea
          name="message"
          id="message"
          rows="5"
          required
          aria-describedby="message-error message-help"
          aria-invalid="false"
          minlength="10"
          maxlength="5000"
        ></textarea>
        <div id="message-help" class="help-text">Please provide details about your inquiry</div>
        <div id="message-error" class="error-message" role="alert" aria-live="polite"></div>
      </div>

      <div class="privacy-notice" role="note" aria-label="Privacy information">
        <p>By submitting this form, you agree to our <a href="/privacy-policy" target="_blank" rel="noopener noreferrer">Privacy Policy</a>.</p>
      </div>

      <button type="submit" id="submit-button">
        <span>Send Message</span>
      </button>
    </form>
    <br><hr style="border-top: 1px dashed var(--border-light)">
    <p>You may also contact me through these platforms:</p>
    <div class="tile-container">
      {[
        { platform: "Facebook", username: "lighttree.gfx" },
        { platform: "LinkedIn", username: "in/matthewoyan/" },
        { platform: "Instagram", username: "sgtlighttree" },
      ].map((item) => (
        <div class="tile-item">
          <Social platform={item.platform} username={item.username} />
        </div>
      ))}
    </div>
  </div>

  <script>
    // Accessible Form Validation
    class AccessibleContactForm {
      private form: HTMLFormElement;
      private submitButton: HTMLButtonElement | null;
      private formErrors: HTMLElement | null;
      private validationRules: Record<string, {
        required?: boolean;
        minLength?: number;
        pattern?: RegExp;
        message: string;
      }>;

      constructor(form: HTMLFormElement) {
        this.form = form;
        this.submitButton = form.querySelector('#submit-button') as HTMLButtonElement | null;
        this.formErrors = form.querySelector('#form-errors');

        this.validationRules = {
          firstname: {
            required: true,
            minLength: 2,
            pattern: /^[a-zA-Z\s'-]+$/,
            message: 'First name must be at least 2 characters and contain only letters'
          },
          lastname: {
            required: true,
            minLength: 2,
            pattern: /^[a-zA-Z\s'-]+$/,
            message: 'Last name must be at least 2 characters and contain only letters'
          },
          email: {
            required: true,
            pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
            message: 'Please enter a valid email address'
          },
          topic: {
            required: true,
            minLength: 5,
            message: 'Subject must be at least 5 characters long'
          },
          message: {
            required: true,
            minLength: 10,
            message: 'Message must be at least 10 characters long'
          }
        };

        this.init();
      }

      init() {
        // Add event listeners
        this.form.addEventListener('submit', (e: Event) => this.handleSubmit(e));

        // Add real-time validation on blur
        Object.keys(this.validationRules).forEach((fieldName: string) => {
          const field = this.form.querySelector(`#${fieldName}`) as HTMLInputElement | HTMLTextAreaElement | null;
          if (field) {
            field.addEventListener('blur', () => this.validateField(fieldName));
            field.addEventListener('input', () => this.clearFieldError(fieldName));
          }
        });

        // Handle form reset
        this.form.addEventListener('reset', () => this.clearAllErrors());
      }

      handleSubmit(event: Event) {
        event.preventDefault();

        // Clear previous errors
        this.clearAllErrors();

        // Validate all fields
        const isValid = this.validateForm();

        if (isValid) {
          // Generate subject line
          this.generateSubject();

          // Show loading state
          this.setLoadingState(true);
          this.form.setAttribute('aria-busy', 'true');

          // Submit the form
          this.form.submit();
        } else {
          // Focus first error field
          this.focusFirstError();

          // Announce errors to screen readers
          this.announceErrors();
        }
      }

      validateForm(): boolean {
        let isValid = true;
        const errors: string[] = [];

        Object.keys(this.validationRules).forEach((fieldName: string) => {
          const field = this.form.querySelector(`#${fieldName}`) as HTMLInputElement | HTMLTextAreaElement | null;
          if (field) {
            const fieldValid = this.validateField(fieldName);
            if (!fieldValid) {
              isValid = false;
              const errorElement = this.form.querySelector(`#${fieldName}-error`);
              if (errorElement) {
                errors.push(`${fieldName}: ${errorElement.textContent}`);
              }
            }
          }
        });

        // Show summary of errors
        if (errors.length > 0) {
          this.showFormErrors(errors);
        }

        return isValid;
      }

      validateField(fieldName: string): boolean {
        const field = this.form.querySelector(`#${fieldName}`) as HTMLInputElement | HTMLTextAreaElement | null;
        const rules = this.validationRules[fieldName];
        const errorElement = this.form.querySelector(`#${fieldName}-error`);

        if (!field || !rules || !errorElement) return true;

        const value = field.value.trim();
        let isValid = true;
        let errorMessage = '';

        // Check required fields
        if (rules.required && !value) {
          isValid = false;
          errorMessage = `${this.getFieldLabel(fieldName)} is required`;
        }
        // Check minimum length
        else if (value && rules.minLength && value.length < rules.minLength) {
          isValid = false;
          errorMessage = rules.message;
        }
        // Check pattern
        else if (value && rules.pattern && !rules.pattern.test(value)) {
          isValid = false;
          errorMessage = rules.message;
        }

        this.setFieldError(fieldName, errorMessage, !isValid);
        return isValid;
      }

      setFieldError(fieldName: string, message: string, hasError: boolean): void {
        const field = this.form.querySelector(`#${fieldName}`) as HTMLInputElement | HTMLTextAreaElement | null;
        const errorElement = this.form.querySelector(`#${fieldName}-error`);

        if (!field || !errorElement) return;

        field.setAttribute('aria-invalid', hasError.toString());
        errorElement.textContent = message;

        if (hasError) {
          field.classList.add('error');
        } else {
          field.classList.remove('error');
        }
      }

      clearFieldError(fieldName: string): void {
        this.setFieldError(fieldName, '', false);
      }

      clearAllErrors(): void {
        Object.keys(this.validationRules).forEach((fieldName: string) => {
          this.clearFieldError(fieldName);
        });
        this.hideFormErrors();
      }

      showFormErrors(errors: string[]): void {
        if (!this.formErrors) return;

        const errorList = errors.map((error: string) => `<li>${error}</li>`).join('');
        this.formErrors.innerHTML = `
          <p>Please correct the following errors:</p>
          <ul>${errorList}</ul>
        `;
        this.formErrors.style.display = 'block';
        this.formErrors.setAttribute('aria-live', 'assertive');
      }

      hideFormErrors(): void {
        if (this.formErrors) {
          this.formErrors.style.display = 'none';
          this.formErrors.setAttribute('aria-live', 'polite');
        }
      }

      getFieldLabel(fieldName: string): string {
        const label = this.form.querySelector(`label[for="${fieldName}"]`);
        return label ? label.textContent.replace('*', '').trim() : fieldName;
      }

      generateSubject(): void {
        const topicEl = this.form.querySelector('#topic') as HTMLInputElement | null;
        const firstnameEl = this.form.querySelector('#firstname') as HTMLInputElement | null;
        const lastnameEl = this.form.querySelector('#lastname') as HTMLInputElement | null;
        const organizationEl = this.form.querySelector('#organization') as HTMLInputElement | null;
        const subjectField = this.form.querySelector('#subject-field') as HTMLInputElement | null;

        if (topicEl && firstnameEl && lastnameEl && subjectField) {
          const sanitize = (s: string, max = 150) => (s || '').replace(/[\r\n]+/g, ' ').trim().slice(0, max);
          const topic = sanitize(topicEl.value, 100);
          const firstname = sanitize(firstnameEl.value, 100);
          const lastname = sanitize(lastnameEl.value, 100);
          const organization = organizationEl ? sanitize(organizationEl.value, 150) : '';

          const base = topic ? `[${topic}]` : '[Contact]';
          const name = [firstname, lastname].filter(Boolean).join(' ');
          const suffix = [name, organization ? `, ${organization}` : ''].filter(Boolean).join('');
          const subject = [base, suffix ? ` - Message from ${suffix}` : ''].join('');

          subjectField.value = subject.slice(0, 200);
        }
      }

      setLoadingState(loading: boolean): void {
        if (!this.submitButton) return;

        this.submitButton.disabled = loading;
        const buttonText = this.submitButton.querySelector('span');

        if (loading) {
          this.submitButton.setAttribute('aria-busy', 'true');
          if (buttonText) buttonText.textContent = 'Sending...';
        } else {
          this.submitButton.setAttribute('aria-busy', 'false');
          if (buttonText) buttonText.textContent = 'Send Message';
        }
      }

      focusFirstError(): void {
        const firstErrorField = this.form.querySelector('[aria-invalid="true"]') as HTMLElement | null;
        if (firstErrorField) {
          firstErrorField.focus();
        }
      }

      announceErrors(): void {
        const errorCount = this.form.querySelectorAll('[aria-invalid="true"]').length;
        if (errorCount > 0) {
          // Create a temporary element for screen reader announcement
          const announcement = document.createElement('div');
          announcement.setAttribute('aria-live', 'assertive');
          announcement.setAttribute('aria-atomic', 'true');
          announcement.className = 'visually-hidden';
          announcement.textContent = `Form has ${errorCount} error${errorCount > 1 ? 's' : ''} that need${errorCount > 1 ? '' : 's'} to be corrected`;

          document.body.appendChild(announcement);

          // Remove after announcement
          setTimeout(() => {
            document.body.removeChild(announcement);
          }, 1000);
        }
      }
    }

    // Phone Selector Functionality
    class PhoneSelector {
      private container: HTMLElement;
      private selector: HTMLButtonElement;
      private dropdown: HTMLElement;
      private searchInput: HTMLInputElement;
      private countryList: HTMLElement;
      private phoneInput: HTMLInputElement;
      private hiddenInput: HTMLInputElement;
      private dialCodeDisplay: HTMLElement;
      private countries: Country[];
      private currentCountry: Country;
      private isOpen: boolean = false;

      constructor(container: HTMLElement) {
        this.container = container;
        this.selector = container.querySelector('.country-selector') as HTMLButtonElement;
        this.dropdown = container.querySelector('.country-dropdown') as HTMLElement;
        this.searchInput = container.querySelector('.country-search') as HTMLInputElement;
        this.countryList = container.querySelector('.country-list') as HTMLElement;
        this.phoneInput = container.querySelector('.phone-input') as HTMLInputElement;
        this.hiddenInput = container.querySelector('.phone-hidden-input') as HTMLInputElement;
        this.dialCodeDisplay = container.querySelector('.dial-code-display') as HTMLElement;

        this.countries = this.getCountries();
        this.currentCountry = this.countries[0]; // Default to Philippines

        this.init();
      }

      private getCountries(): Country[] {
        const countries: Country[] = [
          // Priority countries first (in specified order)
          { name: "Philippines", code: "PH", dialCode: "+63", flag: "ðŸ‡µðŸ‡­" },
          { name: "United States", code: "US", dialCode: "+1", flag: "ðŸ‡ºðŸ‡¸" },
          { name: "United Kingdom", code: "GB", dialCode: "+44", flag: "ðŸ‡¬ðŸ‡§" },
          { name: "Singapore", code: "SG", dialCode: "+65", flag: "ðŸ‡¸ðŸ‡¬" },
          { name: "Australia", code: "AU", dialCode: "+61", flag: "ðŸ‡¦ðŸ‡º" },

          // Remaining countries in alphabetical order
          { name: "Afghanistan", code: "AF", dialCode: "+93", flag: "ðŸ‡¦ðŸ‡«" },
          { name: "Albania", code: "AL", dialCode: "+355", flag: "ðŸ‡¦ðŸ‡±" },
          { name: "Algeria", code: "DZ", dialCode: "+213", flag: "ðŸ‡©ðŸ‡¿" },
          { name: "Andorra", code: "AD", dialCode: "+376", flag: "ðŸ‡¦ðŸ‡©" },
          { name: "Angola", code: "AO", dialCode: "+244", flag: "ðŸ‡¦ðŸ‡´" },
          { name: "Antigua and Barbuda", code: "AG", dialCode: "+1", flag: "ðŸ‡¦ðŸ‡¬" },
          { name: "Argentina", code: "AR", dialCode: "+54", flag: "ðŸ‡¦ðŸ‡·" },
          { name: "Armenia", code: "AM", dialCode: "+374", flag: "ðŸ‡¦ðŸ‡²" },
          { name: "Austria", code: "AT", dialCode: "+43", flag: "ðŸ‡¦ðŸ‡¹" },
          { name: "Azerbaijan", code: "AZ", dialCode: "+994", flag: "ðŸ‡¦ðŸ‡¿" },
          { name: "Bahamas", code: "BS", dialCode: "+1", flag: "ðŸ‡§ðŸ‡¸" },
          { name: "Bahrain", code: "BH", dialCode: "+973", flag: "ðŸ‡§ðŸ‡­" },
          { name: "Bangladesh", code: "BD", dialCode: "+880", flag: "ðŸ‡§ðŸ‡©" },
          { name: "Barbados", code: "BB", dialCode: "+1", flag: "ðŸ‡§ðŸ‡§" },
          { name: "Belarus", code: "BY", dialCode: "+375", flag: "ðŸ‡§ðŸ‡¾" },
          { name: "Belgium", code: "BE", dialCode: "+32", flag: "ðŸ‡§ðŸ‡ª" },
          { name: "Belize", code: "BZ", dialCode: "+501", flag: "ðŸ‡§ðŸ‡¿" },
          { name: "Benin", code: "BJ", dialCode: "+229", flag: "ðŸ‡§ðŸ‡¯" },
          { name: "Bhutan", code: "BT", dialCode: "+975", flag: "ðŸ‡§ðŸ‡¹" },
          { name: "Bolivia", code: "BO", dialCode: "+591", flag: "ðŸ‡§ðŸ‡´" },
          { name: "Bosnia and Herzegovina", code: "BA", dialCode: "+387", flag: "ðŸ‡§ðŸ‡¦" },
          { name: "Botswana", code: "BW", dialCode: "+267", flag: "ðŸ‡§ðŸ‡¼" },
          { name: "Brazil", code: "BR", dialCode: "+55", flag: "ðŸ‡§ðŸ‡·" },
          { name: "Brunei", code: "BN", dialCode: "+673", flag: "ðŸ‡§ðŸ‡³" },
          { name: "Bulgaria", code: "BG", dialCode: "+359", flag: "ðŸ‡§ðŸ‡¬" },
          { name: "Burkina Faso", code: "BF", dialCode: "+226", flag: "ðŸ‡§ðŸ‡«" },
          { name: "Burundi", code: "BI", dialCode: "+257", flag: "ðŸ‡§ðŸ‡®" },
          { name: "Cambodia", code: "KH", dialCode: "+855", flag: "ðŸ‡°ðŸ‡­" },
          { name: "Cameroon", code: "CM", dialCode: "+237", flag: "ðŸ‡¨ðŸ‡²" },
          { name: "Canada", code: "CA", dialCode: "+1", flag: "ðŸ‡¨ðŸ‡¦" },
          { name: "Cape Verde", code: "CV", dialCode: "+238", flag: "ðŸ‡¨ðŸ‡»" },
          { name: "Central African Republic", code: "CF", dialCode: "+236", flag: "ðŸ‡¨ðŸ‡«" },
          { name: "Chad", code: "TD", dialCode: "+235", flag: "ðŸ‡¹ðŸ‡©" },
          { name: "Chile", code: "CL", dialCode: "+56", flag: "ðŸ‡¨ðŸ‡±" },
          { name: "China", code: "CN", dialCode: "+86", flag: "ðŸ‡¨ðŸ‡³" },
          { name: "Colombia", code: "CO", dialCode: "+57", flag: "ðŸ‡¨ðŸ‡´" },
          { name: "Comoros", code: "KM", dialCode: "+269", flag: "ðŸ‡°ðŸ‡²" },
          { name: "Congo", code: "CG", dialCode: "+242", flag: "ðŸ‡¨ðŸ‡¬" },
          { name: "Costa Rica", code: "CR", dialCode: "+506", flag: "ðŸ‡¨ðŸ‡·" },
          { name: "Croatia", code: "HR", dialCode: "+385", flag: "ðŸ‡­ðŸ‡·" },
          { name: "Cuba", code: "CU", dialCode: "+53", flag: "ðŸ‡¨ðŸ‡º" },
          { name: "Cyprus", code: "CY", dialCode: "+357", flag: "ðŸ‡¨ðŸ‡¾" },
          { name: "Czech Republic", code: "CZ", dialCode: "+420", flag: "ðŸ‡¨ðŸ‡¿" },
          { name: "Denmark", code: "DK", dialCode: "+45", flag: "ðŸ‡©ðŸ‡°" },
          { name: "Djibouti", code: "DJ", dialCode: "+253", flag: "ðŸ‡©ðŸ‡¯" },
          { name: "Dominica", code: "DM", dialCode: "+1", flag: "ðŸ‡©ðŸ‡²" },
          { name: "Dominican Republic", code: "DO", dialCode: "+1", flag: "ðŸ‡©ðŸ‡´" },
          { name: "East Timor", code: "TL", dialCode: "+670", flag: "ðŸ‡¹ðŸ‡±" },
          { name: "Ecuador", code: "EC", dialCode: "+593", flag: "ðŸ‡ªðŸ‡¨" },
          { name: "Egypt", code: "EG", dialCode: "+20", flag: "ðŸ‡ªðŸ‡¬" },
          { name: "El Salvador", code: "SV", dialCode: "+503", flag: "ðŸ‡¸ðŸ‡»" },
          { name: "Equatorial Guinea", code: "GQ", dialCode: "+240", flag: "ðŸ‡¬ðŸ‡¶" },
          { name: "Eritrea", code: "ER", dialCode: "+291", flag: "ðŸ‡ªðŸ‡·" },
          { name: "Estonia", code: "EE", dialCode: "+372", flag: "ðŸ‡ªðŸ‡ª" },
          { name: "Eswatini", code: "SZ", dialCode: "+268", flag: "ðŸ‡¸ðŸ‡¿" },
          { name: "Ethiopia", code: "ET", dialCode: "+251", flag: "ðŸ‡ªðŸ‡¹" },
          { name: "Fiji", code: "FJ", dialCode: "+679", flag: "ðŸ‡«ðŸ‡¯" },
          { name: "Finland", code: "FI", dialCode: "+358", flag: "ðŸ‡«ðŸ‡®" },
          { name: "France", code: "FR", dialCode: "+33", flag: "ðŸ‡«ðŸ‡·" },
          { name: "Gabon", code: "GA", dialCode: "+241", flag: "ðŸ‡¬ðŸ‡¦" },
          { name: "Gambia", code: "GM", dialCode: "+220", flag: "ðŸ‡¬ðŸ‡²" },
          { name: "Georgia", code: "GE", dialCode: "+995", flag: "ðŸ‡¬ðŸ‡ª" },
          { name: "Germany", code: "DE", dialCode: "+49", flag: "ðŸ‡©ðŸ‡ª" },
          { name: "Ghana", code: "GH", dialCode: "+233", flag: "ðŸ‡¬ðŸ‡­" },
          { name: "Greece", code: "GR", dialCode: "+30", flag: "ðŸ‡¬ðŸ‡·" },
          { name: "Grenada", code: "GD", dialCode: "+1", flag: "ðŸ‡¬ðŸ‡©" },
          { name: "Guatemala", code: "GT", dialCode: "+502", flag: "ðŸ‡¬ðŸ‡¹" },
          { name: "Guinea", code: "GN", dialCode: "+224", flag: "ðŸ‡¬ðŸ‡³" },
          { name: "Guinea-Bissau", code: "GW", dialCode: "+245", flag: "ðŸ‡¬ðŸ‡¼" },
          { name: "Guyana", code: "GY", dialCode: "+592", flag: "ðŸ‡¬ðŸ‡¾" },
          { name: "Haiti", code: "HT", dialCode: "+509", flag: "ðŸ‡­ðŸ‡¹" },
          { name: "Honduras", code: "HN", dialCode: "+504", flag: "ðŸ‡­ðŸ‡³" },
          { name: "Hong Kong", code: "HK", dialCode: "+852", flag: "ðŸ‡­ðŸ‡°" },
          { name: "Hungary", code: "HU", dialCode: "+36", flag: "ðŸ‡­ðŸ‡º" },
          { name: "Iceland", code: "IS", dialCode: "+354", flag: "ðŸ‡®ðŸ‡¸" },
          { name: "India", code: "IN", dialCode: "+91", flag: "ðŸ‡®ðŸ‡³" },
          { name: "Indonesia", code: "ID", dialCode: "+62", flag: "ðŸ‡®ðŸ‡©" },
          { name: "Iran", code: "IR", dialCode: "+98", flag: "ðŸ‡®ðŸ‡·" },
          { name: "Iraq", code: "IQ", dialCode: "+964", flag: "ðŸ‡®ðŸ‡¶" },
          { name: "Ireland", code: "IE", dialCode: "+353", flag: "ðŸ‡®ðŸ‡ª" },
          { name: "Israel", code: "IL", dialCode: "+972", flag: "ðŸ‡®ðŸ‡±" },
          { name: "Italy", code: "IT", dialCode: "+39", flag: "ðŸ‡®ðŸ‡¹" },
          { name: "Ivory Coast", code: "CI", dialCode: "+225", flag: "ðŸ‡¨ðŸ‡®" },
          { name: "Jamaica", code: "JM", dialCode: "+1", flag: "ðŸ‡¯ðŸ‡²" },
          { name: "Japan", code: "JP", dialCode: "+81", flag: "ðŸ‡¯ðŸ‡µ" },
          { name: "Jordan", code: "JO", dialCode: "+962", flag: "ðŸ‡¯ðŸ‡´" },
          { name: "Kazakhstan", code: "KZ", dialCode: "+7", flag: "ðŸ‡°ðŸ‡¿" },
          { name: "Kenya", code: "KE", dialCode: "+254", flag: "ðŸ‡°ðŸ‡ª" },
          { name: "Kiribati", code: "KI", dialCode: "+686", flag: "ðŸ‡°ðŸ‡®" },
          { name: "Kosovo", code: "XK", dialCode: "+383", flag: "ðŸ‡½ðŸ‡°" },
          { name: "Kuwait", code: "KW", dialCode: "+965", flag: "ðŸ‡°ðŸ‡¼" },
          { name: "Kyrgyzstan", code: "KG", dialCode: "+996", flag: "ðŸ‡°ðŸ‡¬" },
          { name: "Laos", code: "LA", dialCode: "+856", flag: "ðŸ‡±ðŸ‡¦" },
          { name: "Latvia", code: "LV", dialCode: "+371", flag: "ðŸ‡±ðŸ‡»" },
          { name: "Lebanon", code: "LB", dialCode: "+961", flag: "ðŸ‡±ðŸ‡§" },
          { name: "Lesotho", code: "LS", dialCode: "+266", flag: "ðŸ‡±ðŸ‡¸" },
          { name: "Liberia", code: "LR", dialCode: "+231", flag: "ðŸ‡±ðŸ‡·" },
          { name: "Libya", code: "LY", dialCode: "+218", flag: "ðŸ‡±ðŸ‡¾" },
          { name: "Liechtenstein", code: "LI", dialCode: "+423", flag: "ðŸ‡±ðŸ‡®" },
          { name: "Lithuania", code: "LT", dialCode: "+370", flag: "ðŸ‡±ðŸ‡¹" },
          { name: "Luxembourg", code: "LU", dialCode: "+352", flag: "ðŸ‡±ðŸ‡º" },
          { name: "Madagascar", code: "MG", dialCode: "+261", flag: "ðŸ‡²ðŸ‡¬" },
          { name: "Malawi", code: "MW", dialCode: "+265", flag: "ðŸ‡²ðŸ‡¼" },
          { name: "Malaysia", code: "MY", dialCode: "+60", flag: "ðŸ‡²ðŸ‡¾" },
          { name: "Maldives", code: "MV", dialCode: "+960", flag: "ðŸ‡²ðŸ‡»" },
          { name: "Mali", code: "ML", dialCode: "+223", flag: "ðŸ‡²ðŸ‡±" },
          { name: "Malta", code: "MT", dialCode: "+356", flag: "ðŸ‡²ðŸ‡¹" },
          { name: "Marshall Islands", code: "MH", dialCode: "+692", flag: "ðŸ‡²ðŸ‡­" },
          { name: "Mauritania", code: "MR", dialCode: "+222", flag: "ðŸ‡²ðŸ‡·" },
          { name: "Mauritius", code: "MU", dialCode: "+230", flag: "ðŸ‡²ðŸ‡º" },
          { name: "Mexico", code: "MX", dialCode: "+52", flag: "ðŸ‡²ðŸ‡½" },
          { name: "Micronesia", code: "FM", dialCode: "+691", flag: "ðŸ‡«ðŸ‡²" },
          { name: "Moldova", code: "MD", dialCode: "+373", flag: "ðŸ‡²ðŸ‡©" },
          { name: "Monaco", code: "MC", dialCode: "+377", flag: "ðŸ‡²ðŸ‡¨" },
          { name: "Mongolia", code: "MN", dialCode: "+976", flag: "ðŸ‡²ðŸ‡³" },
          { name: "Montenegro", code: "ME", dialCode: "+382", flag: "ðŸ‡²ðŸ‡ª" },
          { name: "Morocco", code: "MA", dialCode: "+212", flag: "ðŸ‡²ðŸ‡¦" },
          { name: "Mozambique", code: "MZ", dialCode: "+258", flag: "ðŸ‡²ðŸ‡¿" },
          { name: "Myanmar", code: "MM", dialCode: "+95", flag: "ðŸ‡²ðŸ‡²" },
          { name: "Namibia", code: "NA", dialCode: "+264", flag: "ðŸ‡³ðŸ‡¦" },
          { name: "Nauru", code: "NR", dialCode: "+674", flag: "ðŸ‡³ðŸ‡·" },
          { name: "Nepal", code: "NP", dialCode: "+977", flag: "ðŸ‡³ðŸ‡µ" },
          { name: "Netherlands", code: "NL", dialCode: "+31", flag: "ðŸ‡³ðŸ‡±" },
          { name: "New Zealand", code: "NZ", dialCode: "+64", flag: "ðŸ‡³ðŸ‡¿" },
          { name: "Nicaragua", code: "NI", dialCode: "+505", flag: "ðŸ‡³ðŸ‡®" },
          { name: "Niger", code: "NE", dialCode: "+227", flag: "ðŸ‡³ðŸ‡ª" },
          { name: "Nigeria", code: "NG", dialCode: "+234", flag: "ðŸ‡³ðŸ‡¬" },
          { name: "North Korea", code: "KP", dialCode: "+850", flag: "ðŸ‡°ðŸ‡µ" },
          { name: "North Macedonia", code: "MK", dialCode: "+389", flag: "ðŸ‡²ðŸ‡°" },
          { name: "Norway", code: "NO", dialCode: "+47", flag: "ðŸ‡³ðŸ‡´" },
          { name: "Oman", code: "OM", dialCode: "+968", flag: "ðŸ‡´ðŸ‡²" },
          { name: "Pakistan", code: "PK", dialCode: "+92", flag: "ðŸ‡µðŸ‡°" },
          { name: "Palau", code: "PW", dialCode: "+680", flag: "ðŸ‡µðŸ‡¼" },
          { name: "Panama", code: "PA", dialCode: "+507", flag: "ðŸ‡µðŸ‡¦" },
          { name: "Papua New Guinea", code: "PG", dialCode: "+675", flag: "ðŸ‡µðŸ‡¬" },
          { name: "Paraguay", code: "PY", dialCode: "+595", flag: "ðŸ‡µðŸ‡¾" },
          { name: "Peru", code: "PE", dialCode: "+51", flag: "ðŸ‡µðŸ‡ª" },
          { name: "Poland", code: "PL", dialCode: "+48", flag: "ðŸ‡µðŸ‡±" },
          { name: "Portugal", code: "PT", dialCode: "+351", flag: "ðŸ‡µðŸ‡¹" },
          { name: "Qatar", code: "QA", dialCode: "+974", flag: "ðŸ‡¶ðŸ‡¦" },
          { name: "Romania", code: "RO", dialCode: "+40", flag: "ðŸ‡·ðŸ‡´" },
          { name: "Russia", code: "RU", dialCode: "+7", flag: "ðŸ‡·ðŸ‡º" },
          { name: "Rwanda", code: "RW", dialCode: "+250", flag: "ðŸ‡·ðŸ‡¼" },
          { name: "Saint Kitts and Nevis", code: "KN", dialCode: "+1", flag: "ðŸ‡°ðŸ‡³" },
          { name: "Saint Lucia", code: "LC", dialCode: "+1", flag: "ðŸ‡±ðŸ‡¨" },
          { name: "Saint Vincent and the Grenadines", code: "VC", dialCode: "+1", flag: "ðŸ‡»ðŸ‡¨" },
          { name: "Samoa", code: "WS", dialCode: "+685", flag: "ðŸ‡¼ðŸ‡¸" },
          { name: "San Marino", code: "SM", dialCode: "+378", flag: "ðŸ‡¸ðŸ‡²" },
          { name: "Sao Tome and Principe", code: "ST", dialCode: "+239", flag: "ðŸ‡¸ðŸ‡¹" },
          { name: "Saudi Arabia", code: "SA", dialCode: "+966", flag: "ðŸ‡¸ðŸ‡¦" },
          { name: "Senegal", code: "SN", dialCode: "+221", flag: "ðŸ‡¸ðŸ‡³" },
          { name: "Serbia", code: "RS", dialCode: "+381", flag: "ðŸ‡·ðŸ‡¸" },
          { name: "Seychelles", code: "SC", dialCode: "+248", flag: "ðŸ‡¸ðŸ‡¨" },
          { name: "Sierra Leone", code: "SL", dialCode: "+232", flag: "ðŸ‡¸ðŸ‡±" },
          { name: "Slovakia", code: "SK", dialCode: "+421", flag: "ðŸ‡¸ðŸ‡°" },
          { name: "Slovenia", code: "SI", dialCode: "+386", flag: "ðŸ‡¸ðŸ‡®" },
          { name: "Solomon Islands", code: "SB", dialCode: "+677", flag: "ðŸ‡¸ðŸ‡§" },
          { name: "Somalia", code: "SO", dialCode: "+252", flag: "ðŸ‡¸ðŸ‡´" },
          { name: "South Africa", code: "ZA", dialCode: "+27", flag: "ðŸ‡¿ðŸ‡¦" },
          { name: "South Korea", code: "KR", dialCode: "+82", flag: "ðŸ‡°ðŸ‡·" },
          { name: "South Sudan", code: "SS", dialCode: "+211", flag: "ðŸ‡¸ðŸ‡¸" },
          { name: "Spain", code: "ES", dialCode: "+34", flag: "ðŸ‡ªðŸ‡¸" },
          { name: "Sri Lanka", code: "LK", dialCode: "+94", flag: "ðŸ‡±ðŸ‡°" },
          { name: "Sudan", code: "SD", dialCode: "+249", flag: "ðŸ‡¸ðŸ‡©" },
          { name: "Suriname", code: "SR", dialCode: "+597", flag: "ðŸ‡¸ðŸ‡·" },
          { name: "Sweden", code: "SE", dialCode: "+46", flag: "ðŸ‡¸ðŸ‡ª" },
          { name: "Switzerland", code: "CH", dialCode: "+41", flag: "ðŸ‡¨ðŸ‡­" },
          { name: "Syria", code: "SY", dialCode: "+963", flag: "ðŸ‡¸ðŸ‡¾" },
          { name: "Taiwan", code: "TW", dialCode: "+886", flag: "ðŸ‡¹ðŸ‡¼" },
          { name: "Tajikistan", code: "TJ", dialCode: "+992", flag: "ðŸ‡¹ðŸ‡¯" },
          { name: "Tanzania", code: "TZ", dialCode: "+255", flag: "ðŸ‡¹ðŸ‡¿" },
          { name: "Thailand", code: "TH", dialCode: "+66", flag: "ðŸ‡¹ðŸ‡­" },
          { name: "Togo", code: "TG", dialCode: "+228", flag: "ðŸ‡¹ðŸ‡¬" },
          { name: "Tonga", code: "TO", dialCode: "+676", flag: "ðŸ‡¹ðŸ‡´" },
          { name: "Trinidad and Tobago", code: "TT", dialCode: "+1", flag: "ðŸ‡¹ðŸ‡¹" },
          { name: "Tunisia", code: "TN", dialCode: "+216", flag: "ðŸ‡¹ðŸ‡³" },
          { name: "Turkey", code: "TR", dialCode: "+90", flag: "ðŸ‡¹ðŸ‡·" },
          { name: "Turkmenistan", code: "TM", dialCode: "+993", flag: "ðŸ‡¹ðŸ‡²" },
          { name: "Tuvalu", code: "TV", dialCode: "+688", flag: "ðŸ‡¹ðŸ‡»" },
          { name: "Uganda", code: "UG", dialCode: "+256", flag: "ðŸ‡ºðŸ‡¬" },
          { name: "Ukraine", code: "UA", dialCode: "+380", flag: "ðŸ‡ºðŸ‡¦" },
          { name: "United Arab Emirates", code: "AE", dialCode: "+971", flag: "ðŸ‡¦ðŸ‡ª" },
          { name: "Uruguay", code: "UY", dialCode: "+598", flag: "ðŸ‡ºðŸ‡¾" },
          { name: "Uzbekistan", code: "UZ", dialCode: "+998", flag: "ðŸ‡ºðŸ‡¿" },
          { name: "Vanuatu", code: "VU", dialCode: "+678", flag: "ðŸ‡»ðŸ‡º" },
          { name: "Vatican City", code: "VA", dialCode: "+39", flag: "ðŸ‡»ðŸ‡¦" },
          { name: "Venezuela", code: "VE", dialCode: "+58", flag: "ðŸ‡»ðŸ‡ª" },
          { name: "Vietnam", code: "VN", dialCode: "+84", flag: "ðŸ‡»ðŸ‡³" },
          { name: "Yemen", code: "YE", dialCode: "+967", flag: "ðŸ‡¾ðŸ‡ª" },
          { name: "Zambia", code: "ZM", dialCode: "+260", flag: "ðŸ‡¿ðŸ‡²" },
          { name: "Zimbabwe", code: "ZW", dialCode: "+263", flag: "ðŸ‡¿ðŸ‡¼" }
        ];

        return countries;
      }

      private init(): void {
        this.updateSelectorDisplay();
        this.populateCountries();
        this.bindEvents();
      }

      private populateCountries(): void {
        this.countryList.innerHTML = '';

        this.countries.forEach((country, index) => {
          const option = document.createElement('div');
          option.className = 'country-option';
          option.setAttribute('role', 'option');
          option.setAttribute('aria-selected', 'false');
          option.setAttribute('data-index', index.toString());

          option.innerHTML = `
            <span class="flag">${country.flag}</span>
            <span class="country-name">${country.name}</span>
            <span class="dial-code">${country.dialCode}</span>
          `;

          option.addEventListener('click', () => this.selectCountry(country, option));
          option.addEventListener('keydown', (e) => this.handleOptionKeydown(e, country, option));

          this.countryList.appendChild(option);
        });
      }

      private bindEvents(): void {
        // Toggle dropdown
        this.selector.addEventListener('click', () => this.toggleDropdown());

        // Search functionality
        this.searchInput.addEventListener('input', (e) => this.handleSearch(e));
        this.searchInput.addEventListener('keydown', (e) => this.handleSearchKeydown(e));

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => this.handleOutsideClick(e));

        // Keyboard navigation
        this.selector.addEventListener('keydown', (e) => this.handleSelectorKeydown(e));

        // Phone input validation (numeric only)
        this.phoneInput.addEventListener('input', (e) => this.handlePhoneInput(e));
        this.phoneInput.addEventListener('keydown', (e) => this.handlePhoneKeydown(e));
      }

      private toggleDropdown(): void {
        if (this.isOpen) {
          this.closeDropdown();
        } else {
          this.openDropdown();
        }
      }

      private openDropdown(): void {
        this.isOpen = true;
        this.selector.setAttribute('aria-expanded', 'true');
        this.dropdown.setAttribute('aria-expanded', 'true');
        this.searchInput.focus();

        // Announce to screen readers
        this.announceDropdown('Country selector opened');
      }

      private closeDropdown(): void {
        this.isOpen = false;
        this.selector.setAttribute('aria-expanded', 'false');
        this.dropdown.setAttribute('aria-expanded', 'false');
        this.searchInput.value = '';

        // Clear search filter
        const options = this.countryList.querySelectorAll('.country-option');
        options.forEach(option => {
          (option as HTMLElement).style.display = 'flex';
        });

        // Only focus selector if keyboard was used to close it
        // Don't focus if closed by clicking outside to avoid stealing focus from other form fields
        this.announceDropdown('Country selector closed');
      }

      private handleSearch(e: Event): void {
        const query = (e.target as HTMLInputElement).value.toLowerCase().trim();
        const options = this.countryList.querySelectorAll('.country-option');

        options.forEach(option => {
          const countryName = option.querySelector('.country-name')?.textContent?.toLowerCase() || '';
          const dialCode = option.querySelector('.dial-code')?.textContent?.toLowerCase() || '';

          if (countryName.includes(query) || dialCode.includes(query)) {
            (option as HTMLElement).style.display = 'flex';
          } else {
            (option as HTMLElement).style.display = 'none';
          }
        });
      }

      private handleSearchKeydown(e: KeyboardEvent): void {
        if (e.key === 'Escape') {
          this.closeDropdown();
        } else if (e.key === 'ArrowDown') {
          e.preventDefault();
          const firstVisibleOption = this.countryList.querySelector('.country-option[style*="flex"]') as HTMLElement;
          if (firstVisibleOption) {
            firstVisibleOption.focus();
          }
        }
      }

      private handleSelectorKeydown(e: KeyboardEvent): void {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.toggleDropdown();
        } else if (e.key === 'ArrowDown' && !this.isOpen) {
          e.preventDefault();
          this.openDropdown();
        }
      }

      private handleOptionKeydown(e: KeyboardEvent, country: Country, option: HTMLElement): void {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.selectCountry(country, option);
        } else if (e.key === 'ArrowDown') {
          e.preventDefault();
          this.focusNextOption(option);
        } else if (e.key === 'ArrowUp') {
          e.preventDefault();
          this.focusPreviousOption(option);
        } else if (e.key === 'Escape') {
          this.closeDropdown();
        }
      }

      private focusNextOption(currentOption: HTMLElement): void {
        const visibleOptions = Array.from(this.countryList.querySelectorAll('.country-option[style*="flex"]')) as HTMLElement[];
        const currentIndex = visibleOptions.indexOf(currentOption);
        const nextIndex = (currentIndex + 1) % visibleOptions.length;
        visibleOptions[nextIndex].focus();
      }

      private focusPreviousOption(currentOption: HTMLElement): void {
        const visibleOptions = Array.from(this.countryList.querySelectorAll('.country-option[style*="flex"]')) as HTMLElement[];
        const currentIndex = visibleOptions.indexOf(currentOption);
        const prevIndex = currentIndex === 0 ? visibleOptions.length - 1 : currentIndex - 1;
        visibleOptions[prevIndex].focus();
      }

      private handleOutsideClick(e: Event): void {
        if (!this.container.contains(e.target as Node)) {
          this.closeDropdown();
        }
      }

      private handlePhoneInput(e: Event): void {
        const input = e.target as HTMLInputElement;
        // Remove any non-numeric characters
        input.value = input.value.replace(/[^\d]/g, '');
        this.updateHiddenInput();
      }

      private handlePhoneKeydown(e: KeyboardEvent): void {
        // Allow backspace, delete, tab, escape, enter, arrows
        if (['Backspace', 'Delete', 'Tab', 'Escape', 'Enter', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {
          return;
        }

        // Prevent input if it's not a number
        if (!/[0-9]/.test(e.key)) {
          e.preventDefault();
        }
      }

      private selectCountry(country: Country, option: HTMLElement): void {
        this.currentCountry = country;
        this.updateSelectorDisplay();
        this.updateHiddenInput();
        this.closeDropdown();

        // Clear previous selection
        const allOptions = this.countryList.querySelectorAll('.country-option');
        allOptions.forEach(opt => opt.setAttribute('aria-selected', 'false'));

        // Set new selection
        option.setAttribute('aria-selected', 'true');

        // Announce selection to screen readers
        this.announceSelection(country);
      }

      private updateSelectorDisplay(): void {
        const flagEl = this.selector.querySelector('.flag');
        const codeEl = this.selector.querySelector('.country-code');

        if (flagEl) flagEl.textContent = this.currentCountry.flag;
        if (codeEl) codeEl.textContent = this.currentCountry.code;
        if (this.dialCodeDisplay) this.dialCodeDisplay.textContent = this.currentCountry.dialCode;
      }

      private updateHiddenInput(): void {
        const phoneNumber = this.phoneInput.value.trim();
        if (phoneNumber) {
          this.hiddenInput.value = `${this.currentCountry.dialCode} ${phoneNumber}`;
        } else {
          this.hiddenInput.value = '';
        }
      }

      private announceDropdown(state: string): void {
        const announcement = document.createElement('div');
        announcement.setAttribute('aria-live', 'polite');
        announcement.setAttribute('aria-atomic', 'true');
        announcement.className = 'visually-hidden';
        announcement.textContent = state;

        document.body.appendChild(announcement);

        setTimeout(() => {
          document.body.removeChild(announcement);
        }, 1000);
      }

      private announceSelection(country: Country): void {
        const announcement = document.createElement('div');
        announcement.setAttribute('aria-live', 'polite');
        announcement.setAttribute('aria-atomic', 'true');
        announcement.className = 'visually-hidden';
        announcement.textContent = `Selected country: ${country.name}, dial code: ${country.dialCode}`;

        document.body.appendChild(announcement);

        setTimeout(() => {
          document.body.removeChild(announcement);
        }, 1000);
      }
    }

    // Country interface
    interface Country {
      name: string;
      code: string;
      dialCode: string;
      flag: string;
    }

    // Initialize the form and phone selector when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
      const contactForm = document.querySelector('form[name="contact"]') as HTMLFormElement | null;
      if (contactForm) {
        new AccessibleContactForm(contactForm);
      }

      // Initialize phone selector
      const phoneContainer = document.querySelector('.phone-selector-container') as HTMLElement | null;
      if (phoneContainer) {
        new PhoneSelector(phoneContainer);
      }
    });
  </script>
</BaseLayout>
