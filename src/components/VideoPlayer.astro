---
const {
  src,
  type = 'video/mp4',
  autoplay = true,
  loop = true,
  muted = true,
  controls = false,
  width = '100%',
  height,
  aspectRatio = '16 / 9',
} = Astro.props;

const containerStyle = {
  width: width,
  height: height || 'auto',
  'aspect-ratio': height ? undefined : aspectRatio,
};
---

<div class="video-container" style={Object.entries(containerStyle).filter(([_, v]) => v !== undefined).map(([k, v]) => `${k}: ${v}`).join(';')}>
  <div class="loading-overlay">
    <div class="loading-text">Loading Video...</div>
    <div class="progress-bar">
      <div class="progress-buffer"></div>
      <div class="progress-indeterminate"></div>
    </div>
  </div>
  <video {autoplay} {loop} {muted} {controls} width="100%" playsinline>
    <source src={src} type={type} />
    Your browser does not support the video tag.
  </video>
</div>

<style>
  .video-container {
    position: relative;
    /* width and aspect-ratio are now set by inline styles */
    background-color: var(--bg-secondary);
    margin-bottom: 1rem;
    overflow: hidden; /* Ensures video stays within container bounds */
  }

  .loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: 1;
    transition: opacity 0.3s ease;
  }

  .loading-text {
    color: var(--text-primary);
    margin-bottom: 1rem;
  }

  .progress-bar {
    width: 80%;
    height: 8px;
    background-color: var(--bg-secondary);
    border: 1px solid var(--text-primary);
    position: relative;
    overflow: hidden;
  }

  .progress-buffer {
    width: 0%;
    height: 100%;
    background-color: var(--text-primary);
    transition: width 0.2s ease-out;
  }

  .progress-indeterminate {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 30%;
    background-color: var(--text-primary);
    opacity: 0.3;
    animation: indeterminate-animation 2s infinite ease-in-out;
  }

  video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  video.loaded {
    opacity: 1;
  }

  .loading-overlay.hidden {
    opacity: 0;
    pointer-events: none;
  }

  @keyframes indeterminate-animation {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(333%);
    }
  }
</style>

<script>
  const initVideoPlayer = (container: Element) => {
    const video = container.querySelector('video');
    const loadingOverlay = container.querySelector('.loading-overlay') as HTMLElement;
    const bufferProgress = container.querySelector('.progress-buffer') as HTMLElement;
    const loadingText = container.querySelector('.loading-text') as HTMLElement;

    if (video && loadingOverlay && bufferProgress && loadingText) {
      const hideLoader = () => {
        if (!loadingOverlay.classList.contains('hidden')) {
          video.classList.add('loaded');
          loadingOverlay.classList.add('hidden');
        }
      };

      const onProgress = () => {
        if (video.duration > 0) {
          const bufferedEnd = video.buffered.length > 0 ? video.buffered.end(video.buffered.length - 1) : 0;
          const bufferedPercent = (bufferedEnd / video.duration) * 100;
          bufferProgress.style.width = `${bufferedPercent}%`;
        }
      };

      video.addEventListener('progress', onProgress);

      if (video.readyState >= 4) {
        hideLoader();
        return;
      }

      const eventToListen = video.autoplay ? 'playing' : 'canplaythrough';
      video.addEventListener(eventToListen, hideLoader, { once: true });

      // Fallback timeout
      setTimeout(() => {
        hideLoader();
      }, 5000); // Hide loader after 5s regardless
    }
  };

  document.querySelectorAll('.video-container').forEach(initVideoPlayer);
</script>
